---
import {
  ensurePgTableExists,
  getPgNotes,
  addPgNote,
  clearPgNotes,
} from "../lib/db/postgres.ts";
import {
  ensureMySqlTableExists,
  getMySqlNotes,
  addMySqlNote,
  clearMySqlNotes,
} from "../lib/db/mysql.ts";

import DbDisplay from "../components/DbDisplay.tsx";

// Ensure tables exist (run once on server start or page load)
// Note: Running this on every request might be inefficient in a real app.
// Consider a separate initialization script or check.
try {
  await ensurePgTableExists();
  await ensureMySqlTableExists();
} catch (error) {
  // Log error but allow the page to potentially render
  console.error("Error ensuring database tables exist:", error);
}

let pgNotes = await getPgNotes();
let mysqlNotes = await getMySqlNotes();

if (Astro.request.method === "POST") {
  let needsRedirect = false;
  try {
    const formData = await Astro.request.formData();
    const content = formData.get("content")?.toString() || "";
    const dbType = formData.get("db_type")?.toString() || "";
    const action = formData.get("action")?.toString() || "add";

    if (action === "add" && content) {
      if (dbType === "mysql") {
        await addMySqlNote(content);
      } else if (dbType === "postgres") {
        await addPgNote(content);
      }
      needsRedirect = true;
    } else if (action === "clear") {
      if (dbType === "mysql") {
        await clearMySqlNotes();
      } else if (dbType === "postgres") {
        await clearPgNotes();
      }
      needsRedirect = true;
    }

    if (needsRedirect) {
      return Astro.redirect("/");
    }
  } catch (error) {
    console.error("Fehler bei der Formularbearbeitung:", error);
    // Optionally: Set an error message to display to the user
  }
}
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Datenbank Demo</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f5f5f5;
        color: #333;
      }
      .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: 20px;
      }
      .db-section {
        flex: 1;
        min-width: 300px;
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      h1 {
        text-align: center;
        margin-bottom: 30px;
        width: 100%;
      }
      h2 {
        color: #333;
        margin-top: 0;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
      }
      form {
        margin-bottom: 20px;
      }
      input[type="text"] {
        flex-grow: 1;
        padding: 8px;
        margin-right: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      button {
        padding: 8px 15px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
      }
      button:hover {
        background-color: #45a049;
      }
      button.danger {
        background-color: #f44336;
      }
      button.danger:hover {
        background-color: #da190b;
      }
      form:not(.clear-form) {
        display: flex;
        align-items: center;
      }
      .clear-form {
        margin-top: 20px;
      }
      .note-container {
        min-height: 150px;
        max-height: 300px;
        overflow-y: auto;
        margin-top: 20px;
        border: 1px solid #eee;
        padding: 10px;
        border-radius: 4px;
        background-color: #fff;
      }
      .note {
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
        border-radius: 4px;
        border-left: 3px solid #4caf50;
        word-wrap: break-word;
      }
      .empty-message {
        color: #999;
        font-style: italic;
        text-align: center;
        margin-top: 50px;
      }
    </style>
  </head>
  <body>
    <h1>Datenbank Demonstration</h1>

    <div class="container">
      <div class="db-section">
        <h2>MySQL Datenbank (Version 8.4)</h2>
        <form method="post">
          <input
            type="text"
            name="content"
            placeholder="Notiz eingeben..."
            required
          />
          <input type="hidden" name="db_type" value="mysql" />
          <input type="hidden" name="action" value="add" />
          <button type="submit">Hinzufügen</button>
        </form>

        <DbDisplay notes={mysqlNotes} dbType="MySQL" />

        <form method="post" class="clear-form">
          <input type="hidden" name="db_type" value="mysql" />
          <input type="hidden" name="action" value="clear" />
          <button type="submit" class="danger">Alle MySQL Daten löschen</button>
        </form>
      </div>

      <div class="db-section">
        <h2>PostgreSQL Datenbank (Version 17)</h2>
        <form method="post">
          <input
            type="text"
            name="content"
            placeholder="Notiz eingeben..."
            required
          />
          <input type="hidden" name="db_type" value="postgres" />
          <input type="hidden" name="action" value="add" />
          <button type="submit">Hinzufügen</button>
        </form>

        <DbDisplay notes={pgNotes} dbType="PostgreSQL" />

        <form method="post" class="clear-form">
          <input type="hidden" name="db_type" value="postgres" />
          <input type="hidden" name="action" value="clear" />
          <button type="submit" class="danger"
            >Alle PostgreSQL Daten löschen</button
          >
        </form>
      </div>
    </div>
  </body>
</html>
